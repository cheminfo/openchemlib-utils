{"version":3,"file":"openchemlib-utils.min.js","sources":["../src/OCL.js","../src/util/tagAtom.js","../src/diastereotopic/addDiastereotopicMissingChirality.js","../src/util/makeRacemic.js","../src/diastereotopic/getDiastereotopicAtomIDs.js","../src/diastereotopic/getDiastereotopicAtomIDsAndH.js","../src/diastereotopic/Dia.js","../src/diastereotopic/toDiastereotopicSVG.js","../src/util/isCsp3.js","../src/hose/getHoseCodesForAtom.js","../src/hose/getHoseCodesFromDiastereotopicID.js","../src/hose/Hose.js","../src/hose/getHoseCodesAndDiastereotopicIDs.js","../src/util/getAtomsInfo.js","../../../mljs/floyd-warshall/node_modules/is-any-array/src/index.js","../../../mljs/floyd-warshall/node_modules/ml-array-max/lib-es6/index.js","../../../mljs/floyd-warshall/node_modules/ml-array-min/lib-es6/index.js","../../../mljs/floyd-warshall/node_modules/ml-array-rescale/lib-es6/index.js","../../../mljs/floyd-warshall/node_modules/ml-matrix/src/util.js","../../../mljs/floyd-warshall/node_modules/ml-matrix/src/inspect.js","../../../mljs/floyd-warshall/node_modules/ml-matrix/src/matrix.js","../../../mljs/floyd-warshall/node_modules/ml-matrix/src/stat.js","../../../mljs/floyd-warshall/node_modules/ml-matrix/src/mathOperations.js","../node_modules/is-any-array/src/index.js","../node_modules/ml-array-max/lib-es6/index.js","../node_modules/ml-array-min/lib-es6/index.js","../node_modules/ml-array-rescale/lib-es6/index.js","../node_modules/ml-matrix/src/util.js","../node_modules/ml-matrix/src/inspect.js","../node_modules/ml-matrix/src/matrix.js","../node_modules/ml-matrix/src/stat.js","../src/util/getConnectivityMatrix.js","../../../mljs/floyd-warshall/src/index.js","../node_modules/ml-matrix/src/mathOperations.js","../src/util/Util.js","../src/hose/getHoseCodesForPath.js","../src/path/getPathsInfo.js","../src/path/Path.js"],"sourcesContent":["let OCL;\n\nexport function getOCL() {\n  if (!OCL) {\n    throw new Error('OCL has to be initialized using initOCL(OCL)');\n  }\n  return OCL;\n}\n\nexport function initOCL(newOCL) {\n  OCL = newOCL;\n}\n","import { getOCL } from '../OCL';\n\nlet xAtomicNumber = 0;\n\n/**\n * Tag an atom to be able to visualize it\n * @param {OCL.Molecule} molecule\n * @param {number} iAtom\n * @memberof Util\n */\nexport function tagAtom(molecule, iAtom) {\n  molecule.setAtomCustomLabel(iAtom, `${molecule.getAtomLabel(iAtom)}*`);\n  if (molecule.getAtomicNo(iAtom) === 1) {\n    molecule.setAtomicNo(iAtom, getXAtomicNumber());\n  } else {\n    // we can not use X because we would have problems with valencies if it is\n    // expanded hydrogens or not\n    // we can not only use a custom label because it does not count for the canonisation\n    molecule.setAtomMass(iAtom, molecule.getAtomMass(iAtom) + 5);\n  }\n}\n\nfunction getXAtomicNumber() {\n  if (!xAtomicNumber) {\n    const OCL = getOCL();\n    xAtomicNumber = OCL.Molecule.getAtomicNoFromLabel('X');\n  }\n  return xAtomicNumber;\n}\n","import { tagAtom } from '../util/tagAtom';\nimport { getOCL } from '../OCL';\n\n/**\n * Add either missing chirality of diastereotopic missing chirality\n * The problem is that sometimes we need to add chiral bond that was not planned because it is the same group\n * This is the case for example for the valine where the 2 C of the methyl groups are diastereotopic\n * @param {OCL.Molecule} molecule\n * @param {object} [options={}]\n * @param {number} [options.esrType=cESRTypeAnd]\n * @memberof Dia\n */\nexport function addDiastereotopicMissingChirality(molecule, options = {}) {\n  const { Molecule } = getOCL();\n  const { esrType = Molecule.cESRTypeAnd } = options;\n\n  for (let iAtom = 0; iAtom < molecule.getAllAtoms(); iAtom++) {\n    let tempMolecule = molecule.getCompactCopy();\n    tagAtom(tempMolecule, iAtom);\n    // After copy, helpers must be recalculated\n    tempMolecule.ensureHelperArrays(Molecule.cHelperBitsStereo);\n    // We need to have >0 and not >1 because there could be unspecified chirality in racemate\n\n    for (let i = 0; i < tempMolecule.getAtoms(); i++) {\n      // changed from from handling below; TLS 9.Nov.2015\n      if (\n        tempMolecule.isAtomStereoCenter(i) &&\n        tempMolecule.getStereoBond(i) === -1\n      ) {\n        let stereoBond = tempMolecule.getAtomPreferredStereoBond(i);\n        if (stereoBond !== -1) {\n          molecule.setBondType(stereoBond, Molecule.cBondTypeUp);\n          if (molecule.getBondAtom(1, stereoBond) === i) {\n            let connAtom = molecule.getBondAtom(0, stereoBond);\n            molecule.setBondAtom(0, stereoBond, i);\n            molecule.setBondAtom(1, stereoBond, connAtom);\n          }\n          // To me it seems that we have to add all stereo centers into AND group 0. TLS 9.Nov.2015\n          molecule.setAtomESR(i, esrType, 0);\n        }\n      }\n    }\n  }\n}\n","import { getOCL } from '../OCL';\n\n/**\n *\n * @param {OCL.Molecule} [molecule] An instance of a molecule\n * @param {object} [options={}]\n * @param {object} [options.OCL] openchemlib library\n * @memberof Util\n */\nexport function makeRacemic(molecule) {\n  const { Molecule } = getOCL();\n\n  // if we don't calculate this we have 2 epimers\n  molecule.ensureHelperArrays(Molecule.cHelperCIP);\n\n  // we need to make one group \"AND\" for chiral (to force to racemic, this means diastereotopic and not enantiotopic)\n  for (let i = 0; i < molecule.getAllAtoms(); i++) {\n    if (molecule.getAtomParity(i) !== Molecule.cAtomParityNone) {\n      molecule.setAtomESR(i, Molecule.cESRTypeAnd, 0); // changed to group 0; TLS 9.Nov.2015\n    }\n  }\n}\n","import { tagAtom } from '../util/tagAtom';\nimport { makeRacemic } from '../util/makeRacemic';\nimport { getOCL } from '../OCL';\n\nimport { addDiastereotopicMissingChirality } from './addDiastereotopicMissingChirality';\n\n/**\n * Returns an array of diastereotopic ID (as oclCode)\n * @param {OCL.Molecule} molecule\n * @memberof Dia\n */\nexport function getDiastereotopicAtomIDs(molecule) {\n  const OCL = getOCL();\n  addDiastereotopicMissingChirality(molecule);\n\n  let numberAtoms = molecule.getAllAtoms();\n  let ids = [];\n  for (let iAtom = 0; iAtom < numberAtoms; iAtom++) {\n    let tempMolecule = molecule.getCompactCopy();\n    tagAtom(tempMolecule, iAtom);\n    makeRacemic(tempMolecule);\n    // We need to ensure the helper array in order to get correctly the result of racemisation\n    ids[iAtom] = tempMolecule.getCanonizedIDCode(\n      OCL.Molecule.CANONIZER_ENCODE_ATOM_CUSTOM_LABELS,\n    );\n  }\n  return ids;\n}\n","import { getOCL } from '../OCL';\n\nimport { getDiastereotopicAtomIDs } from './getDiastereotopicAtomIDs';\n// Previously getExtendedDiastereotopicAtomIDs\n\n/**\n *\n * @param {OCL.Molecule} molecule\n * @memberof Dia\n */\nexport function getDiastereotopicAtomIDsAndH(originalMolecule) {\n  const OCL = getOCL();\n  const molecule = originalMolecule.getCompactCopy();\n  molecule.addImplicitHydrogens();\n  // TODO Temporary code ???\n  molecule.ensureHelperArrays(OCL.Molecule.cHelperNeighbours);\n\n  const diaIDs = getDiastereotopicAtomIDs(molecule);\n  const newDiaIDs = [];\n\n  for (let i = 0; i < diaIDs.length; i++) {\n    const diaID = diaIDs[i];\n    const newDiaID = {\n      oclID: diaID,\n      hydrogenOCLIDs: [],\n      nbHydrogens: 0,\n    };\n    for (let j = 0; j < molecule.getAllConnAtoms(i); j++) {\n      const atom = molecule.getConnAtom(i, j);\n      if (molecule.getAtomicNo(atom) === 1) {\n        newDiaID.nbHydrogens++;\n        if (newDiaID.hydrogenOCLIDs.indexOf(diaIDs[atom]) === -1) {\n          newDiaID.hydrogenOCLIDs.push(diaIDs[atom]);\n        }\n      }\n    }\n\n    newDiaIDs.push(newDiaID);\n  }\n\n  return newDiaIDs;\n}\n","import { addDiastereotopicMissingChirality } from './addDiastereotopicMissingChirality';\nimport { getDiastereotopicAtomIDs } from './getDiastereotopicAtomIDs';\nimport { getDiastereotopicAtomIDsAndH } from './getDiastereotopicAtomIDsAndH';\nimport { toDiastereotopicSVG } from './toDiastereotopicSVG';\n\nexport const Dia = {\n  addDiastereotopicMissingChirality,\n  getDiastereotopicAtomIDs,\n  getDiastereotopicAtomIDsAndH,\n  toDiastereotopicSVG,\n};\n","import { getDiastereotopicAtomIDsAndH } from './getDiastereotopicAtomIDsAndH';\n\n/**\n * Returns a SVG\n * @param {*} molecule\n * @param {*} [options={}]\n * @memberof Dia\n */\nexport function toDiastereotopicSVG(molecule, options = {}) {\n  let {\n    width = 300,\n    height = 200,\n    prefix = 'ocl',\n    heavyAtomHydrogen = false,\n  } = options;\n  let svg = options.svg;\n  let diaIDs = [];\n\n  let hydrogenInfo = {};\n  getDiastereotopicAtomIDsAndH(molecule).forEach(function(line) {\n    hydrogenInfo[line.oclID] = line;\n  });\n\n  if (heavyAtomHydrogen) {\n    for (let i = 0; i < molecule.getAtoms(); i++) {\n      diaIDs.push([]);\n    }\n    let groupedDiaIDs = molecule.getGroupedDiastereotopicAtomIDs();\n    groupedDiaIDs.forEach(function(diaID) {\n      if (\n        hydrogenInfo[diaID.oclID] &&\n        hydrogenInfo[diaID.oclID].nbHydrogens > 0\n      ) {\n        diaID.atoms.forEach((atom) => {\n          hydrogenInfo[diaID.oclID].hydrogenOCLIDs.forEach((id) => {\n            if (!diaIDs[atom * 1].includes(id)) diaIDs[atom].push(id);\n          });\n        });\n      }\n    });\n  } else {\n    diaIDs = molecule.getDiastereotopicAtomIDs().map((a) => [a]);\n  }\n\n  if (!svg) svg = molecule.toSVG(width, height, prefix);\n\n  svg = svg.replace(/Atom:[0-9]+\"/g, function(value) {\n    let atom = value.replace(/[^0-9]/g, '');\n    return `${value} data-diaid=\"${diaIDs[atom].join(',')}\"`;\n  });\n\n  return svg;\n}\n","/**\n * Check if a specific atom is a sp3 carbon\n * @param {OCL.Molecule} molecule\n * @param {number} atomID\n * @memberof Util\n */\n\nexport function isCsp3(molecule, atomID) {\n  if (molecule.getAtomicNo(atomID) !== 6) return false;\n  if (molecule.getAtomCharge(atomID) !== 0) return false;\n  if (\n    molecule.getImplicitHydrogens(atomID) + molecule.getConnAtoms(atomID) !==\n    4\n  ) {\n    return false;\n  }\n  return true;\n}\n","import { getOCL } from '../OCL';\nimport { tagAtom } from '../util/tagAtom';\nimport { isCsp3 } from '../util/isCsp3';\n\nexport const FULL_HOSE_CODE = 1;\nexport const HOSE_CODE_CUT_C_SP3_SP3 = 2;\n\n/**\n * Returns the hose code for a specific atom number\n * @param {OCL.Molecule} originalMolecule\n * @param {number} rootAtom\n * @param {object} [options={}]\n * @param {boolean} [options.isTagged] Specify is the atom is already tagged\n * @memberof Hose\n */\nexport function getHoseCodesForAtom(originalMolecule, rootAtom, options = {}) {\n  const OCL = getOCL();\n  const {\n    minSphereSize = 0,\n    maxSphereSize = 4,\n    kind = FULL_HOSE_CODE,\n    isTagged = false,\n  } = options;\n\n  const molecule = originalMolecule.getCompactCopy();\n\n  if (!isTagged) tagAtom(molecule, rootAtom);\n\n  molecule.setFragment(true);\n\n  let fragment = new OCL.Molecule(0, 0);\n  let results = [];\n  let min = 0;\n  let max = 0;\n  let atomMask = new Array(molecule.getAllAtoms());\n  let atomList = new Array(molecule.getAllAtoms());\n\n  for (let sphere = 0; sphere <= maxSphereSize; sphere++) {\n    if (max === 0) {\n      atomList[0] = rootAtom;\n      atomMask[rootAtom] = true;\n      max = 1;\n    } else {\n      let newMax = max;\n      for (let i = min; i < max; i++) {\n        let atom = atomList[i];\n        for (let j = 0; j < molecule.getConnAtoms(atom); j++) {\n          let connAtom = molecule.getConnAtom(atom, j);\n          if (!atomMask[connAtom]) {\n            switch (kind) {\n              case FULL_HOSE_CODE:\n                atomMask[connAtom] = true;\n                atomList[newMax++] = connAtom;\n                break;\n              case HOSE_CODE_CUT_C_SP3_SP3:\n                if (!(isCsp3(molecule, atom) && isCsp3(molecule, connAtom))) {\n                  atomMask[connAtom] = true;\n                  atomList[newMax++] = connAtom;\n                }\n                break;\n              default:\n                throw new Error('getHoseCoesForAtom unknown kind');\n            }\n          }\n        }\n      }\n      min = max;\n      max = newMax;\n    }\n    molecule.copyMoleculeByAtoms(fragment, atomMask, true, null);\n    if (sphere >= minSphereSize) {\n      results.push(\n        fragment.getCanonizedIDCode(\n          OCL.Molecule.CANONIZER_ENCODE_ATOM_CUSTOM_LABELS,\n        ),\n      );\n    }\n  }\n  return results;\n}\n","import { getOCL } from '../OCL';\n\nimport { getHoseCodesForAtom } from './getHoseCodesForAtom';\n/**\n * Returns the hose code for a specific marked atom\n * @param {string} diastereotopicID\n * @param {object} options\n * @memberof Hose\n */\n\nexport function getHoseCodesFromDiastereotopicID(\n  diastereotopicID,\n  options = {},\n) {\n  const OCL = getOCL();\n  const molecule = OCL.Molecule.fromIDCode(diastereotopicID);\n  // One of the atom has to be marked !\n  let atomID = -1;\n  for (let i = 0; i < molecule.getAllAtoms(); i++) {\n    // we need to find the marked atom\n    const atomCustomLabel = molecule.getAtomCustomLabel(i);\n    if (atomCustomLabel != null && atomCustomLabel.endsWith('*')) {\n      atomID = i;\n      break;\n    }\n  }\n  if (atomID >= 0) {\n    options.isTagged = true;\n    return getHoseCodesForAtom(molecule, atomID, options);\n  }\n  return undefined;\n}\n","import { getHoseCodesAndDiastereotopicIDs } from './getHoseCodesAndDiastereotopicIDs';\nimport { getHoseCodesForAtom } from './getHoseCodesForAtom';\nimport { getHoseCodesFromDiastereotopicID } from './getHoseCodesFromDiastereotopicID';\n\nexport const Hose = {\n  getHoseCodesAndDiastereotopicIDs,\n  getHoseCodesForAtom,\n  getHoseCodesFromDiastereotopicID,\n};\n","import { getDiastereotopicAtomIDs } from '../diastereotopic/getDiastereotopicAtomIDs';\n\nimport { getHoseCodesFromDiastereotopicID } from './getHoseCodesFromDiastereotopicID';\n/**\n * Returns an array containing one entry per atom containing\n * diaID and hose code\n * @param {OCL.Molecule} molecule\n * @param {object} options\n * @memberof Hose\n */\n\nexport function getHoseCodesAndDiastereotopicIDs(molecule, options) {\n  const diaIDs = getDiastereotopicAtomIDs(molecule).map((oclID) => ({\n    oclID,\n  }));\n  // seems like a very slow approach\n  diaIDs.forEach(function(diaID) {\n    const hoses = getHoseCodesFromDiastereotopicID(diaID.oclID, options);\n    diaID.hoses = [];\n    let sphere = 0;\n    for (const hose of hoses) {\n      diaID.hoses.push({\n        sphere: sphere++,\n        oclID: hose,\n      });\n    }\n  });\n  return diaIDs;\n}\n","import { getOCL } from '../OCL';\nimport { getDiastereotopicAtomIDs } from '../diastereotopic/getDiastereotopicAtomIDs';\n\n/**\n * Returns various information about atoms in the molecule\n * @param {OCL.Molecule} [molecule]\n * @memberof Util\n */\nexport function getAtomsInfo(molecule) {\n  const OCL = getOCL();\n  molecule.ensureHelperArrays(OCL.Molecule.cHelperRings);\n\n  let diaIDs = getDiastereotopicAtomIDs(molecule);\n\n  let results = [];\n  for (let i = 0; i < diaIDs.length; i++) {\n    let result = {\n      oclID: diaIDs[i],\n      extra: {\n        singleBonds: 0,\n        doubleBonds: 0,\n        tripleBonds: 0,\n        aromaticBonds: 0,\n        cnoHybridation: 0, // should be 1 (sp), 2 (sp2) or 3 (sp3)\n      },\n    };\n    let extra = result.extra;\n    results.push(result);\n    result.abnormalValence = molecule.getAtomAbnormalValence(i); // -1 is normal otherwise specified\n    result.charge = molecule.getAtomCharge(i);\n    result.cipParity = molecule.getAtomCIPParity(i);\n    result.color = molecule.getAtomColor(i);\n    result.customLabel = molecule.getAtomCustomLabel(i);\n    //        result.esrGroup=molecule.getAtomESRGroup(i);\n    //        result.esrType=molecule.getAtomESRType(i);\n    result.atomicNo = molecule.getAtomicNo(i);\n    result.label = molecule.getAtomLabel(i);\n    //        result.list=molecule.getAtomList(i);\n    //        result.listString=molecule.getAtomListString(i);\n    //        result.mapNo=molecule.getAtomMapNo(i);\n    result.mass = molecule.getAtomMass(i);\n    //        result.parity=molecule.getAtomParity(i);\n    //        result.pi=molecule.getAtomPi(i);\n    //        result.preferredStereoBond=molecule.getAtomPreferredStereoBond(i);\n    //        result.queryFeatures=molecule.getAtomQueryFeatures(i);\n    result.radical = molecule.getAtomRadical(i);\n    result.ringBondCount = molecule.getAtomRingBondCount(i);\n    //        result.ringCount=molecule.getAtomRingCount(i);\n    result.ringSize = molecule.getAtomRingSize(i);\n    result.x = molecule.getAtomX(i);\n    result.y = molecule.getAtomY(i);\n    result.z = molecule.getAtomZ(i);\n    result.allHydrogens = molecule.getAllHydrogens(i);\n    result.connAtoms = molecule.getConnAtoms(i);\n    result.allConnAtoms = molecule.getAllConnAtoms(i);\n\n    result.implicitHydrogens =\n      result.allHydrogens + result.connAtoms - result.allConnAtoms;\n\n    result.isAromatic = molecule.isAromaticAtom(i);\n    result.isAllylic = molecule.isAllylicAtom(i);\n    result.isStereoCenter = molecule.isAtomStereoCenter(i);\n    result.isRing = molecule.isRingAtom(i);\n    result.isSmallRing = molecule.isSmallRingAtom(i);\n    result.isStabilized = molecule.isStabilizedAtom(i);\n\n    // todo HACK to circumvent bug in OCL that consider than an hydrogen is connected to itself\n    result.extra.singleBonds =\n      result.atomicNo === 1 ? 0 : result.implicitHydrogens;\n    for (let j = 0; j < molecule.getAllConnAtoms(i); j++) {\n      let bond = molecule.getConnBond(i, j);\n      let bondOrder = molecule.getBondOrder(bond);\n      if (molecule.isAromaticBond(bond)) {\n        extra.aromaticBonds++;\n      } else if (bondOrder === 1) {\n        // not an hydrogen\n        extra.singleBonds++;\n      } else if (bondOrder === 2) {\n        extra.doubleBonds++;\n      } else if (bondOrder === 3) {\n        extra.tripleBonds++;\n      }\n    }\n    result.extra.totalBonds =\n      result.extra.singleBonds +\n      result.extra.doubleBonds +\n      result.extra.tripleBonds +\n      result.extra.aromaticBonds;\n\n    if (result.atomicNo === 6) {\n      result.extra.cnoHybridation = result.extra.totalBonds - 1;\n    } else if (result.atomicNo === 7) {\n      result.extra.cnoHybridation = result.extra.totalBonds;\n    } else if (result.atomicNo === 8) {\n      result.extra.cnoHybridation = result.extra.totalBonds + 1;\n    } else if (result.atomicNo === 1) {\n      let connectedAtom =\n        molecule.getAllConnAtoms(i) === 0\n          ? 0\n          : molecule.getAtomicNo(molecule.getConnAtom(i, 0));\n      result.extra.hydrogenOnAtomicNo = connectedAtom;\n      if (connectedAtom === 7 || connectedAtom === 8) {\n        result.extra.labileHydrogen = true;\n      }\n    }\n  }\n  return results;\n}\n","'use strict';\n\nconst toString = Object.prototype.toString;\n\nfunction isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}\n\nmodule.exports = isAnyArray;\n","import isArray from 'is-any-array';\n\n/**\n * Computes the maximum of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction max(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var maxValue = input[0];\n\n  for (var i = 1; i < input.length; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n\n  return maxValue;\n}\n\nexport default max;\n","import isArray from 'is-any-array';\n\n/**\n * Computes the minimum of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction min(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var minValue = input[0];\n\n  for (var i = 1; i < input.length; i++) {\n    if (input[i] < minValue) minValue = input[i];\n  }\n\n  return minValue;\n}\n\nexport default min;\n","import max from 'ml-array-max';\nimport min from 'ml-array-min';\nimport isArray from 'is-any-array';\n\nfunction rescale(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  } else if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var output;\n\n  if (options.output !== undefined) {\n    if (!isArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  var currentMin = min(input);\n  var currentMax = max(input);\n\n  if (currentMin === currentMax) {\n    throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n  }\n\n  var _options$min = options.min,\n      minValue = _options$min === void 0 ? options.autoMinMax ? currentMin : 0 : _options$min,\n      _options$max = options.max,\n      maxValue = _options$max === void 0 ? options.autoMinMax ? currentMax : 1 : _options$max;\n\n  if (minValue >= maxValue) {\n    throw new RangeError('min option must be smaller than max option');\n  }\n\n  var factor = (maxValue - minValue) / (currentMax - currentMin);\n\n  for (var i = 0; i < input.length; i++) {\n    output[i] = (input[i] - currentMin) * factor + minValue;\n  }\n\n  return output;\n}\n\nexport default rescale;\n","/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkRowIndex(matrix, index, outer) {\n  let max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkColumnIndex(matrix, index, outer) {\n  let max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns',\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nexport function checkIndices(matrix, rowIndices, columnIndices) {\n  return {\n    row: checkRowIndices(matrix, rowIndices),\n    column: checkColumnIndices(matrix, columnIndices),\n  };\n}\n\nexport function checkRowIndices(matrix, rowIndices) {\n  if (typeof rowIndices !== 'object') {\n    throw new TypeError('unexpected type for row indices');\n  }\n\n  let rowOut = rowIndices.some((r) => {\n    return r < 0 || r >= matrix.rows;\n  });\n\n  if (rowOut) {\n    throw new RangeError('row indices are out of range');\n  }\n\n  if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n\n  return rowIndices;\n}\n\nexport function checkColumnIndices(matrix, columnIndices) {\n  if (typeof columnIndices !== 'object') {\n    throw new TypeError('unexpected type for column indices');\n  }\n\n  let columnOut = columnIndices.some((c) => {\n    return c < 0 || c >= matrix.columns;\n  });\n\n  if (columnOut) {\n    throw new RangeError('column indices are out of range');\n  }\n  if (!Array.isArray(columnIndices)) columnIndices = Array.from(columnIndices);\n\n  return columnIndices;\n}\n\nexport function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nexport function newArray(length, value = 0) {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array.push(value);\n  }\n  return array;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n","export function inspectMatrix() {\n  const indent = ' '.repeat(2);\n  const indentData = ' '.repeat(4);\n  return `${this.constructor.name} {\n${indent}[\n${indentData}${inspectData(this, indentData)}\n${indent}]\n${indent}rows: ${this.rows}\n${indent}columns: ${this.columns}\n}`;\n}\n\nconst maxRows = 15;\nconst maxColumns = 10;\nconst maxNumSize = 8;\n\nfunction inspectData(matrix, indent) {\n  const { rows, columns } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j)));\n    }\n    result.push(`${line.join(' ')}`);\n  }\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n  return result.join(`\\n${indent}`);\n}\n\nfunction formatNumber(num) {\n  const numStr = String(num);\n  if (numStr.length <= maxNumSize) {\n    return numStr.padEnd(maxNumSize, ' ');\n  }\n  const precise = num.toPrecision(maxNumSize - 2);\n  if (precise.length <= maxNumSize) {\n    return precise;\n  }\n  const exponential = num.toExponential(maxNumSize - 2);\n  const eIndex = exponential.indexOf('e');\n  const e = exponential.substring(eIndex);\n  return exponential.substring(0, maxNumSize - e.length) + e;\n}\n","import rescale from 'ml-array-rescale';\n\nimport {\n  checkRowVector,\n  checkRowIndex,\n  checkColumnIndex,\n  checkColumnVector,\n  checkRange,\n  checkIndices,\n} from './util';\nimport {\n  sumByRow,\n  sumByColumn,\n  sumAll,\n  productByRow,\n  productByColumn,\n  productAll,\n  varianceByRow,\n  varianceByColumn,\n  varianceAll,\n  centerByRow,\n  centerByColumn,\n  centerAll,\n  scaleByRow,\n  scaleByColumn,\n  scaleAll,\n  getScaleByRow,\n  getScaleByColumn,\n  getScaleAll,\n} from './stat';\nimport { inspectMatrix } from './inspect';\nimport { installMathOperations } from './mathOperations';\n\nexport class AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max() {\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  maxIndex() {\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min() {\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  minIndex() {\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    let result = 0;\n    if (type === 'max') {\n      return this.max();\n    } else if (type === 'frobenius') {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.columns; j++) {\n          result = result + this.get(i, j) * this.get(i, j);\n        }\n      }\n      return Math.sqrt(result);\n    } else {\n      throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      resultat = resultat.setSubMatrix(c11, 0, 0);\n      resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n      resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n      resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n      return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      rescale(row, { min, max, output: row });\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      rescale(column, {\n        min: min,\n        max: max,\n        output: column,\n      });\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    let indices = checkIndices(this, rowIndices, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < indices.row.length; i++) {\n      let rowIndex = indices.row[i];\n      for (let j = 0; j < indices.column.length; j++) {\n        let columnIndex = indices.column[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n    return newMatrix;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[\n    Symbol.for('nodejs.util.inspect.custom')\n  ] = inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nexport default class Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows > 0) {\n      // Create an empty matrix\n      this.data = [];\n      if (Number.isInteger(nColumns) && nColumns > 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (Array.isArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = arrayData[0].length;\n      if (typeof nColumns !== 'number' || nColumns === 0) {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n    return this;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    if (this.rows === 1) {\n      throw new RangeError('A matrix cannot have less than one row');\n    }\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array, true));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    if (this.columns === 1) {\n      throw new RangeError('A matrix cannot have less than one column');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n","import { newArray } from './util';\n\nexport function sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumAll(matrix) {\n  let v = 0;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productAll(matrix) {\n  let v = 1;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / cols) / cols);\n    }\n  }\n  return variance;\n}\n\nexport function varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / rows) / rows);\n    }\n  }\n  return variance;\n}\n\nexport function varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n  if (unbiased) {\n    return (sum2 - (sum1 * sum1) / size) / (size - 1);\n  } else {\n    return (sum2 - (sum1 * sum1) / size) / size;\n  }\n}\n\nexport function centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\n\nexport function centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\n\nexport function centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\n\nexport function getScaleByRow(matrix) {\n  const scale = [];\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\n\nexport function getScaleByColumn(matrix) {\n  const scale = [];\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\n\nexport function getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / divider;\n    }\n  }\n  return Math.sqrt(sum);\n}\n\nexport function scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}\n","export function installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.add = function add(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sub = function sub(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mul = function mul(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.div = function div(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mod = function mod(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.and = function and(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.or = function or(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.xor = function xor(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n\n  AbstractMatrix.prototype.not = function not() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, ~(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.not = function not(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n\n  AbstractMatrix.prototype.abs = function abs() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.abs = function abs(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n\n  AbstractMatrix.prototype.acos = function acos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acos = function acos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acosh = function acosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n\n  AbstractMatrix.prototype.asin = function asin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asin = function asin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asinh = function asinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n\n  AbstractMatrix.prototype.atan = function atan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atan = function atan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atanh = function atanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.ceil = function ceil(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n\n  AbstractMatrix.prototype.cos = function cos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cos = function cos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cosh = function cosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n\n  AbstractMatrix.prototype.exp = function exp() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.exp = function exp(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n\n  AbstractMatrix.prototype.floor = function floor() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.floor = function floor(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n\n  AbstractMatrix.prototype.fround = function fround() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.fround = function fround(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n\n  AbstractMatrix.prototype.log = function log() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log = function log(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log1p = function log1p(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log10 = function log10(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log2 = function log2(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n\n  AbstractMatrix.prototype.round = function round() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.round = function round(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n\n  AbstractMatrix.prototype.sign = function sign() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sign = function sign(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n\n  AbstractMatrix.prototype.sin = function sin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sin = function sin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sinh = function sinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n\n  AbstractMatrix.prototype.tan = function tan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tan = function tan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tanh = function tanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.trunc = function trunc(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), value));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), matrix.get(i, j)));\n      }\n    }\n    return this;\n  };\n}\n","'use strict';\n\nconst toString = Object.prototype.toString;\n\nfunction isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}\n\nmodule.exports = isAnyArray;\n","import isArray from 'is-any-array';\n\n/**\n * Computes the maximum of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction max(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var maxValue = input[0];\n\n  for (var i = 1; i < input.length; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n\n  return maxValue;\n}\n\nexport default max;\n","import isArray from 'is-any-array';\n\n/**\n * Computes the minimum of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction min(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var minValue = input[0];\n\n  for (var i = 1; i < input.length; i++) {\n    if (input[i] < minValue) minValue = input[i];\n  }\n\n  return minValue;\n}\n\nexport default min;\n","import max from 'ml-array-max';\nimport min from 'ml-array-min';\nimport isArray from 'is-any-array';\n\nfunction rescale(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  } else if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var output;\n\n  if (options.output !== undefined) {\n    if (!isArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  var currentMin = min(input);\n  var currentMax = max(input);\n\n  if (currentMin === currentMax) {\n    throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n  }\n\n  var _options$min = options.min,\n      minValue = _options$min === void 0 ? options.autoMinMax ? currentMin : 0 : _options$min,\n      _options$max = options.max,\n      maxValue = _options$max === void 0 ? options.autoMinMax ? currentMax : 1 : _options$max;\n\n  if (minValue >= maxValue) {\n    throw new RangeError('min option must be smaller than max option');\n  }\n\n  var factor = (maxValue - minValue) / (currentMax - currentMin);\n\n  for (var i = 0; i < input.length; i++) {\n    output[i] = (input[i] - currentMin) * factor + minValue;\n  }\n\n  return output;\n}\n\nexport default rescale;\n","/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkRowIndex(matrix, index, outer) {\n  let max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkColumnIndex(matrix, index, outer) {\n  let max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns',\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nexport function checkIndices(matrix, rowIndices, columnIndices) {\n  return {\n    row: checkRowIndices(matrix, rowIndices),\n    column: checkColumnIndices(matrix, columnIndices),\n  };\n}\n\nexport function checkRowIndices(matrix, rowIndices) {\n  if (typeof rowIndices !== 'object') {\n    throw new TypeError('unexpected type for row indices');\n  }\n\n  let rowOut = rowIndices.some((r) => {\n    return r < 0 || r >= matrix.rows;\n  });\n\n  if (rowOut) {\n    throw new RangeError('row indices are out of range');\n  }\n\n  if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n\n  return rowIndices;\n}\n\nexport function checkColumnIndices(matrix, columnIndices) {\n  if (typeof columnIndices !== 'object') {\n    throw new TypeError('unexpected type for column indices');\n  }\n\n  let columnOut = columnIndices.some((c) => {\n    return c < 0 || c >= matrix.columns;\n  });\n\n  if (columnOut) {\n    throw new RangeError('column indices are out of range');\n  }\n  if (!Array.isArray(columnIndices)) columnIndices = Array.from(columnIndices);\n\n  return columnIndices;\n}\n\nexport function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nexport function newArray(length, value = 0) {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array.push(value);\n  }\n  return array;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n","export function inspectMatrix() {\n  const indent = ' '.repeat(2);\n  const indentData = ' '.repeat(4);\n  return `${this.constructor.name} {\n${indent}[\n${indentData}${inspectData(this, indentData)}\n${indent}]\n${indent}rows: ${this.rows}\n${indent}columns: ${this.columns}\n}`;\n}\n\nconst maxRows = 15;\nconst maxColumns = 10;\nconst maxNumSize = 8;\n\nfunction inspectData(matrix, indent) {\n  const { rows, columns } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j)));\n    }\n    result.push(`${line.join(' ')}`);\n  }\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n  return result.join(`\\n${indent}`);\n}\n\nfunction formatNumber(num) {\n  const numStr = String(num);\n  if (numStr.length <= maxNumSize) {\n    return numStr.padEnd(maxNumSize, ' ');\n  }\n  const precise = num.toPrecision(maxNumSize - 2);\n  if (precise.length <= maxNumSize) {\n    return precise;\n  }\n  const exponential = num.toExponential(maxNumSize - 2);\n  const eIndex = exponential.indexOf('e');\n  const e = exponential.substring(eIndex);\n  return exponential.substring(0, maxNumSize - e.length) + e;\n}\n","import rescale from 'ml-array-rescale';\n\nimport {\n  checkRowVector,\n  checkRowIndex,\n  checkColumnIndex,\n  checkColumnVector,\n  checkRange,\n  checkIndices,\n} from './util';\nimport {\n  sumByRow,\n  sumByColumn,\n  sumAll,\n  productByRow,\n  productByColumn,\n  productAll,\n  varianceByRow,\n  varianceByColumn,\n  varianceAll,\n  centerByRow,\n  centerByColumn,\n  centerAll,\n  scaleByRow,\n  scaleByColumn,\n  scaleAll,\n  getScaleByRow,\n  getScaleByColumn,\n  getScaleAll,\n} from './stat';\nimport { inspectMatrix } from './inspect';\nimport { installMathOperations } from './mathOperations';\n\nexport class AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max() {\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  maxIndex() {\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min() {\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  minIndex() {\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    let result = 0;\n    if (type === 'max') {\n      return this.max();\n    } else if (type === 'frobenius') {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.columns; j++) {\n          result = result + this.get(i, j) * this.get(i, j);\n        }\n      }\n      return Math.sqrt(result);\n    } else {\n      throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      resultat = resultat.setSubMatrix(c11, 0, 0);\n      resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n      resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n      resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n      return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      rescale(row, { min, max, output: row });\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      rescale(column, {\n        min: min,\n        max: max,\n        output: column,\n      });\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    let indices = checkIndices(this, rowIndices, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < indices.row.length; i++) {\n      let rowIndex = indices.row[i];\n      for (let j = 0; j < indices.column.length; j++) {\n        let columnIndex = indices.column[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n    return newMatrix;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[\n    Symbol.for('nodejs.util.inspect.custom')\n  ] = inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nexport default class Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows > 0) {\n      // Create an empty matrix\n      this.data = [];\n      if (Number.isInteger(nColumns) && nColumns > 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (Array.isArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = arrayData[0].length;\n      if (typeof nColumns !== 'number' || nColumns === 0) {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n    return this;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    if (this.rows === 1) {\n      throw new RangeError('A matrix cannot have less than one row');\n    }\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array, true));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    if (this.columns === 1) {\n      throw new RangeError('A matrix cannot have less than one column');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n","import { newArray } from './util';\n\nexport function sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumAll(matrix) {\n  let v = 0;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productAll(matrix) {\n  let v = 1;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / cols) / cols);\n    }\n  }\n  return variance;\n}\n\nexport function varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / rows) / rows);\n    }\n  }\n  return variance;\n}\n\nexport function varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n  if (unbiased) {\n    return (sum2 - (sum1 * sum1) / size) / (size - 1);\n  } else {\n    return (sum2 - (sum1 * sum1) / size) / size;\n  }\n}\n\nexport function centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\n\nexport function centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\n\nexport function centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\n\nexport function getScaleByRow(matrix) {\n  const scale = [];\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\n\nexport function getScaleByColumn(matrix) {\n  const scale = [];\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\n\nexport function getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / divider;\n    }\n  }\n  return Math.sqrt(sum);\n}\n\nexport function scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}\n","import floydWarshall from 'ml-floyd-warshall';\nimport { Matrix } from 'ml-matrix';\n\nimport { getOCL } from '../OCL';\n\n/**\n * Returns a connectivity matrix\n * @param {OCL.Molecule} molecule\n * @param {object} [options={}]\n * @param {boolean} [options.pathLength=false] get the path length between atoms\n * @param {boolean} [options.mass=false] set the nominal mass of the atoms on diagonal\n * @param {boolean} [options.atomicNo=false] set the atomic number of the atom on diagonal\n * @param {boolean} [options.sdt=false] set 1, 2 or 3 depending if single, double or triple bond\n * @memberof Util\n */\nexport function getConnectivityMatrix(molecule, options = {}) {\n  const OCL = getOCL();\n  molecule.ensureHelperArrays(OCL.Molecule.cHelperNeighbours);\n  let nbAtoms = molecule.getAllAtoms();\n\n  let result = new Array(nbAtoms).fill();\n  result = result.map(() => new Array(nbAtoms).fill(0));\n\n  if (!options.pathLength) {\n    if (options.atomicNo) {\n      for (let i = 0; i < nbAtoms; i++) {\n        result[i][i] = molecule.getAtomicNo(i);\n      }\n    } else if (options.mass) {\n      for (let i = 0; i < nbAtoms; i++) {\n        result[i][i] = OCL.Molecule.cRoundedMass[molecule.getAtomicNo(i)];\n      }\n    } else {\n      for (let i = 0; i < nbAtoms; i++) {\n        result[i][i] = 1;\n      }\n    }\n  }\n\n  if (options.sdt) {\n    for (let i = 0; i < nbAtoms; i++) {\n      let l = molecule.getAllConnAtoms(i);\n      for (let j = 0; j < l; j++) {\n        result[i][molecule.getConnAtom(i, j)] = molecule.getConnBondOrder(i, j);\n      }\n    }\n  } else {\n    for (let i = 0; i < nbAtoms; i++) {\n      let l = molecule.getAllConnAtoms(i);\n      for (let j = 0; j < l; j++) {\n        result[i][molecule.getConnAtom(i, j)] = 1;\n      }\n    }\n  }\n\n  if (options.pathLength) {\n    result = floydWarshall(new Matrix(result)).to2DArray();\n  }\n  return result;\n}\n","import { Matrix } from 'ml-matrix';\n\n/**\n * Algorithm that finds the shortest distance from one node to the other\n * @param {Matrix} adjMatrix - A squared adjacency matrix\n * @return {Matrix} - Distance from a node to the other, -1 if the node is unreachable\n */\nexport default function floydWarshall(adjMatrix) {\n  if (Matrix.isMatrix(adjMatrix) && adjMatrix.columns !== adjMatrix.rows) {\n    throw new TypeError('The adjacency matrix should be squared');\n  }\n  const numVertices = adjMatrix.columns;\n  let distMatrix = new Matrix(numVertices, numVertices);\n  distMatrix.apply((row, column) => {\n    // principal diagonal is 0\n    if (row === column) {\n      distMatrix.set(row, column, 0);\n    } else {\n      let val = adjMatrix.get(row, column);\n\n      if (val) {\n        // edges values remain the same\n        distMatrix.set(row, column, val);\n      } else {\n        // 0 values become infinity\n        distMatrix.set(row, column, Number.POSITIVE_INFINITY);\n      }\n    }\n  });\n\n  for (let k = 0; k < numVertices; ++k) {\n    for (let i = 0; i < numVertices; ++i) {\n      for (let j = 0; j < numVertices; ++j) {\n        let dist = distMatrix.get(i, k) + distMatrix.get(k, j);\n        if (distMatrix.get(i, j) > dist) {\n          distMatrix.set(i, j, dist);\n        }\n      }\n    }\n  }\n\n  // When there's no connection the value is -1\n  distMatrix.apply((row, column) => {\n    if (distMatrix.get(row, column) === Number.POSITIVE_INFINITY) {\n      distMatrix.set(row, column, -1);\n    }\n  });\n  return distMatrix;\n}\n","export function installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.add = function add(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sub = function sub(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mul = function mul(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.div = function div(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mod = function mod(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.and = function and(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.or = function or(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.xor = function xor(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n\n  AbstractMatrix.prototype.not = function not() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, ~(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.not = function not(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n\n  AbstractMatrix.prototype.abs = function abs() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.abs = function abs(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n\n  AbstractMatrix.prototype.acos = function acos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acos = function acos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acosh = function acosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n\n  AbstractMatrix.prototype.asin = function asin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asin = function asin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asinh = function asinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n\n  AbstractMatrix.prototype.atan = function atan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atan = function atan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atanh = function atanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.ceil = function ceil(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n\n  AbstractMatrix.prototype.cos = function cos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cos = function cos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cosh = function cosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n\n  AbstractMatrix.prototype.exp = function exp() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.exp = function exp(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n\n  AbstractMatrix.prototype.floor = function floor() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.floor = function floor(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n\n  AbstractMatrix.prototype.fround = function fround() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.fround = function fround(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n\n  AbstractMatrix.prototype.log = function log() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log = function log(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log1p = function log1p(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log10 = function log10(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log2 = function log2(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n\n  AbstractMatrix.prototype.round = function round() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.round = function round(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n\n  AbstractMatrix.prototype.sign = function sign() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sign = function sign(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n\n  AbstractMatrix.prototype.sin = function sin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sin = function sin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sinh = function sinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n\n  AbstractMatrix.prototype.tan = function tan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tan = function tan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tanh = function tanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.trunc = function trunc(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), value));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), matrix.get(i, j)));\n      }\n    }\n    return this;\n  };\n}\n","import { getAtomsInfo } from './getAtomsInfo';\nimport { getConnectivityMatrix } from './getConnectivityMatrix';\nimport { makeRacemic } from './makeRacemic';\nimport { tagAtom } from './tagAtom';\nimport { isCsp3 } from './isCsp3';\n\nexport const Util = {\n  getAtomsInfo,\n  getConnectivityMatrix,\n  makeRacemic,\n  tagAtom,\n  isCsp3,\n};\n","import { tagAtom } from '../util/tagAtom';\nimport { getOCL } from '../OCL';\n\nlet fragment;\n\n/**\n * Returns the hose code for a specific atom number\n * @param {OCL.Molecule} molecule\n * @memberof Hose\n */\nexport function getHoseCodesForPath(molecule, from, to, maxLength) {\n  const OCL = getOCL();\n  molecule = molecule.getCompactCopy();\n\n  if (!fragment) fragment = new OCL.Molecule(0, 0);\n\n  tagAtom(molecule, from);\n  tagAtom(molecule, to);\n\n  let atoms = [];\n  molecule.getPath(atoms, from, to, maxLength + 1);\n  let torsion;\n  if (atoms.length === 4) {\n    torsion = molecule.calculateTorsion(atoms);\n  }\n\n  let min = 0;\n  let max = 0;\n  let atomMask = new Array(molecule.getAllAtoms()).fill(false);\n  let atomList = new Array(molecule.getAllAtoms()).fill(-1);\n  let hoses = [];\n\n  for (let sphere = 0; sphere <= 2; sphere++) {\n    if (max === 0) {\n      for (let atom of atoms) {\n        atomMask[atom] = true;\n        atomList[max++] = atom;\n      }\n    } else {\n      let newMax = max;\n      for (let i = min; i < max; i++) {\n        let atom = atomList[i];\n        for (let j = 0; j < molecule.getConnAtoms(atom); j++) {\n          let connAtom = molecule.getConnAtom(atom, j);\n          if (!atomMask[connAtom]) {\n            atomMask[connAtom] = true;\n            atomList[newMax++] = connAtom;\n          }\n        }\n      }\n      min = max;\n      max = newMax;\n    }\n    molecule.copyMoleculeByAtoms(fragment, atomMask, true, null);\n    hoses.push({\n      sphere,\n      oclID: fragment.getCanonizedIDCode(\n        OCL.Molecule.CANONIZER_ENCODE_ATOM_CUSTOM_LABELS,\n      ),\n    });\n  }\n\n  return {\n    atoms,\n    from,\n    to,\n    torsion,\n    hoses,\n    length: atoms.length - 1,\n  };\n}\n","import { getConnectivityMatrix } from '../util/getConnectivityMatrix';\nimport { getAtomsInfo } from '../util/getAtomsInfo';\nimport { getOCL } from '../OCL';\nimport { getHoseCodesForPath } from '../hose/getHoseCodesForPath';\n\nlet fragment;\n\n/**\n *\n * @param {OCL.Molecule} molecule\n * @param {object} [options={}]\n * @param {string} [opions.fromLabel='H']\n * @param {string} [opions.toLabel='H']\n * @param {string} [opions.minLenght=1]\n * @param {string} [opions.maxLength=4]\n * @memberof Path\n */\nexport function getPathsInfo(molecule, options = {}) {\n  const {\n    fromLabel = 'H',\n    toLabel = 'H',\n    minLength = 1,\n    maxLength = 4,\n  } = options;\n\n  const OCL = getOCL();\n\n  if (!fragment) {\n    fragment = new OCL.Molecule(0, 0);\n  }\n\n  let fromAtomicNumber = OCL.Molecule.getAtomicNoFromLabel(fromLabel);\n  let toAtomicNumber = OCL.Molecule.getAtomicNoFromLabel(toLabel);\n\n  // we need to find all the atoms 'fromLabel' and 'toLabel'\n  let atomsInfo = getAtomsInfo(molecule);\n\n  let pathLengthMatrix = getConnectivityMatrix(molecule, {\n    pathLength: true,\n  });\n\n  for (let from = 0; from < molecule.getAllAtoms(); from++) {\n    atomsInfo[from].couplings = [];\n    for (let to = 0; to < molecule.getAllAtoms(); to++) {\n      if (from !== to) {\n        if (molecule.getAtomicNo(from) === fromAtomicNumber) {\n          if (molecule.getAtomicNo(to) === toAtomicNumber) {\n            let pathLength = pathLengthMatrix[from][to];\n            if (pathLength >= minLength && pathLength <= maxLength) {\n              atomsInfo[from].couplings.push(\n                getHoseCodesForPath(\n                  molecule,\n                  from,\n                  to,\n                  pathLength,\n                  atomsInfo[to].oclID,\n                ),\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return atomsInfo;\n}\n","import { getPathsInfo } from './getPathsInfo';\n\nexport const Path = {\n  getPathsInfo,\n};\n"],"names":["OCL","getOCL","Error","xAtomicNumber","tagAtom","molecule","iAtom","setAtomCustomLabel","getAtomLabel","getAtomicNo","setAtomicNo","Molecule","getAtomicNoFromLabel","getXAtomicNumber","setAtomMass","getAtomMass","addDiastereotopicMissingChirality","options","esrType","cESRTypeAnd","getAllAtoms","tempMolecule","getCompactCopy","ensureHelperArrays","cHelperBitsStereo","i","getAtoms","isAtomStereoCenter","getStereoBond","stereoBond","getAtomPreferredStereoBond","setBondType","cBondTypeUp","getBondAtom","connAtom","setBondAtom","setAtomESR","makeRacemic","cHelperCIP","getAtomParity","cAtomParityNone","getDiastereotopicAtomIDs","numberAtoms","ids","getCanonizedIDCode","CANONIZER_ENCODE_ATOM_CUSTOM_LABELS","getDiastereotopicAtomIDsAndH","originalMolecule","addImplicitHydrogens","cHelperNeighbours","diaIDs","newDiaIDs","length","newDiaID","oclID","hydrogenOCLIDs","nbHydrogens","j","getAllConnAtoms","atom","getConnAtom","indexOf","push","Dia","toDiastereotopicSVG","width","height","prefix","heavyAtomHydrogen","svg","hydrogenInfo","forEach","line","getGroupedDiastereotopicAtomIDs","diaID","atoms","id","includes","map","a","toSVG","replace","value","join","isCsp3","atomID","getAtomCharge","getImplicitHydrogens","getConnAtoms","FULL_HOSE_CODE","getHoseCodesForAtom","rootAtom","minSphereSize","maxSphereSize","kind","isTagged","setFragment","fragment","results","min","max","atomMask","Array","atomList","sphere","newMax","copyMoleculeByAtoms","getHoseCodesFromDiastereotopicID","diastereotopicID","fromIDCode","atomCustomLabel","getAtomCustomLabel","endsWith","Hose","getHoseCodesAndDiastereotopicIDs","hoses","hose","getAtomsInfo","cHelperRings","result","extra","singleBonds","doubleBonds","tripleBonds","aromaticBonds","cnoHybridation","abnormalValence","getAtomAbnormalValence","charge","cipParity","getAtomCIPParity","color","getAtomColor","customLabel","atomicNo","label","mass","radical","getAtomRadical","ringBondCount","getAtomRingBondCount","ringSize","getAtomRingSize","x","getAtomX","y","getAtomY","z","getAtomZ","allHydrogens","getAllHydrogens","connAtoms","allConnAtoms","implicitHydrogens","isAromatic","isAromaticAtom","isAllylic","isAllylicAtom","isStereoCenter","isRing","isRingAtom","isSmallRing","isSmallRingAtom","isStabilized","isStabilizedAtom","bond","getConnBond","bondOrder","getBondOrder","isAromaticBond","totalBonds","connectedAtom","hydrogenOnAtomicNo","labileHydrogen","toString","Object","prototype","object","call","input","isArray","TypeError","maxValue","minValue","rescale","output","arguments","undefined","currentMin","currentMax","RangeError","_options$min","autoMinMax","_options$max","factor","checkRowIndex","matrix","index","outer","rows","checkColumnIndex","columns","checkRowVector","vector","to1DArray","checkColumnVector","checkRowIndices","rowIndices","some","r","from","checkColumnIndices","columnIndices","c","checkRange","startRow","endRow","startColumn","endColumn","checkNumber","newArray","array","name","formatNumber","num","numStr","String","padEnd","precise","toPrecision","maxNumSize","exponential","toExponential","eIndex","e","substring","AbstractMatrix","newRows","newColumns","newData","newMatrix","Matrix","row","column","set","fill","random","Math","Number","isInteger","interval","round","this","zeros","data","l","matrix1","matrix2","checkMatrix","get","isMatrix","klass","apply","callback","to2DArray","copy","toJSON","isRowVector","isColumnVector","isVector","isSquare","isSymmetric","isEchelonForm","previousColumn","checked","isReducedEchelonForm","k","echelonForm","clone","h","iMax","swapRows","tmp","reducedEchelonForm","m","n","maxRow","p","pivot","repeat","setSubMatrix","neg","mulS","getRow","getRowVector","rowVector","setRow","row1","row2","temp","getColumn","getColumnVector","columnVector","setColumn","swapColumns","column1","column2","addRowVector","subRowVector","mulRowVector","divRowVector","addColumnVector","subColumnVector","mulColumnVector","divColumnVector","mulRow","mulColumn","v","maxIndex","idx","minIndex","maxRowIndex","minRow","minRowIndex","maxColumn","maxColumnIndex","minColumn","minColumnIndex","diag","norm","type","sqrt","cumulativeSum","sum","dot","vector2","vector1","mmul","other","Bcolj","Float64Array","s","strassen2x2","a11","b11","a12","b12","a21","b21","a22","b22","m1","m2","m3","m4","m5","c00","c01","c10","c11","strassen3x3","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m6","m7","m8","m9","m12","m13","m14","m15","m16","m17","m18","c02","c12","c20","c21","c22","mmulStrassen","r1","c1","r2","c2","embed","mat","cols","resultat","console","warn","blockMult","b","halfRows","parseInt","halfCols","subMatrix","add","sub","scaleRows","isFinite","scaleColumns","flipRows","middle","ceil","first","last","flipColumns","kroneckerProduct","q","transpose","sortRows","compareFunction","compareNumbers","sort","sortColumns","subMatrixRow","indices","subMatrixColumn","selection","checkIndices","rowIndex","columnIndex","trace","by","sumByRow","sumByColumn","sumAll","product","productByRow","productByColumn","productAll","mean","size","variance","unbiased","sum1","sum2","varianceByRow","varianceByColumn","varianceAll","standardDeviation","center","centerByRow","centerByColumn","centerAll","scale","pow","getScaleByRow","scaleByRow","getScaleByColumn","scaleByColumn","divider","getScaleAll","scaleAll","Symbol","for","indent","indentData","constructor","maxI","maxJ","inspectData","rand","randomInt","randInt","diagonal","identity","eye","negate","tensorProduct","nRows","nColumns","arrayData","removeRow","splice","addRow","removeColumn","newRow","addColumn","addS","addM","subS","subM","subtract","subtractS","subtractM","mul","mulM","multiply","multiplyS","multiplyM","div","divS","divM","divide","divideS","divideM","mod","modS","modM","modulus","modulusS","modulusM","and","andS","andM","or","orS","orM","xor","xorS","xorM","leftShift","leftShiftS","leftShiftM","signPropagatingRightShift","signPropagatingRightShiftS","signPropagatingRightShiftM","rightShift","rightShiftS","rightShiftM","zeroFillRightShift","zeroFillRightShiftS","zeroFillRightShiftM","not","abs","acos","acosh","asin","asinh","atan","atanh","cbrt","clz32","cos","cosh","exp","expm1","floor","fround","log","log1p","log10","log2","sign","sin","sinh","tan","tanh","trunc","arg0","powS","powM","installMathOperations","getConnectivityMatrix","nbAtoms","pathLength","cRoundedMass","sdt","getConnBondOrder","adjMatrix","numVertices","distMatrix","val","POSITIVE_INFINITY","dist","floydWarshall","Util","getHoseCodesForPath","to","maxLength","torsion","getPath","calculateTorsion","Path","getPathsInfo","fromLabel","toLabel","minLength","fromAtomicNumber","toAtomicNumber","atomsInfo","pathLengthMatrix","couplings","newOCL"],"mappings":"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"}